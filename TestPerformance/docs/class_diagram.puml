@startuml LibroNova_Class_Diagram

!theme plain
title LibroNova Library Management System - Class Diagram

' Domain Classes
package "Domain" {
    class Book {
        -id: Long
        -isbn: String
        -title: String
        -author: String
        -publisher: String
        -year: Year
        -availableStock: int
        -totalStock: int
        +Book()
        +Book(isbn, title, author, publisher, year, totalStock)
        +getId(): Long
        +setId(id: Long): void
        +getIsbn(): String
        +setIsbn(isbn: String): void
        +getTitle(): String
        +setTitle(title: String): void
        +getAuthor(): String
        +setAuthor(author: String): void
        +getPublisher(): String
        +setPublisher(publisher: String): void
        +getYear(): Year
        +setYear(year: Year): void
        +getAvailableStock(): int
        +setAvailableStock(availableStock: int): void
        +getTotalStock(): int
        +setTotalStock(totalStock: int): void
        +isAvailable(): boolean
        +equals(obj: Object): boolean
        +hashCode(): int
        +toString(): String
    }

    class Member {
        -id: Long
        -name: String
        -email: String
        -memberNumber: String
        -status: MemberStatus
        -registrationDate: LocalDate
        -role: UserRole
        +Member()
        +Member(name, email, memberNumber)
        +getId(): Long
        +setId(id: Long): void
        +getName(): String
        +setName(name: String): void
        +getEmail(): String
        +setEmail(email: String): void
        +getMemberNumber(): String
        +setMemberNumber(memberNumber: String): void
        +getStatus(): MemberStatus
        +setStatus(status: MemberStatus): void
        +getRegistrationDate(): LocalDate
        +setRegistrationDate(date: LocalDate): void
        +getRole(): UserRole
        +setRole(role: UserRole): void
        +isActive(): boolean
        +equals(obj: Object): boolean
        +hashCode(): int
        +toString(): String
    }

    class Loan {
        -id: Long
        -book: Book
        -member: Member
        -loanDate: LocalDate
        -expectedReturnDate: LocalDate
        -actualReturnDate: LocalDate
        -status: LoanStatus
        +Loan()
        +Loan(book: Book, member: Member, loanDays: int)
        +getId(): Long
        +setId(id: Long): void
        +getBook(): Book
        +setBook(book: Book): void
        +getMember(): Member
        +setMember(member: Member): void
        +getLoanDate(): LocalDate
        +setLoanDate(date: LocalDate): void
        +getExpectedReturnDate(): LocalDate
        +setExpectedReturnDate(date: LocalDate): void
        +getActualReturnDate(): LocalDate
        +setActualReturnDate(date: LocalDate): void
        +getStatus(): LoanStatus
        +setStatus(status: LoanStatus): void
        +isOverdue(): boolean
        +overdueDays(): long
        +equals(obj: Object): boolean
        +hashCode(): int
        +toString(): String
    }

    enum MemberStatus {
        ACTIVE
        INACTIVE
    }

    enum LoanStatus {
        ACTIVE
        RETURNED
        OVERDUE
    }

    enum UserRole {
        MEMBER
        LIBRARIAN
        ADMIN
    }
}

' Service Layer
package "Service" {
    interface BookService {
        +registerBook(book: Book): Book
        +updateBook(book: Book): Book
        +findBookById(id: Long): Book
        +findBookByIsbn(isbn: String): Book
        +listAllBooks(): List<Book>
        +findBooksByTitle(title: String): List<Book>
        +deleteBook(id: Long): void
    }

    interface MemberService {
        +registerMember(member: Member): Member
        +updateMember(member: Member): Member
        +findMemberById(id: Long): Member
        +findMemberByNumber(memberNumber: String): Member
        +listAllMembers(): List<Member>
        +listActiveMembers(): List<Member>
        +activateMember(id: Long): void
        +deactivateMember(id: Long): void
        +deleteMember(id: Long): void
    }

    interface LoanService {
        +createLoan(bookId: Long, memberId: Long, loanDays: int): Loan
        +returnBook(loanId: Long): Loan
        +findLoanById(id: Long): Loan
        +listAllLoans(): List<Loan>
        +listActiveLoansByMember(memberId: Long): List<Loan>
        +listOverdueLoans(): List<Loan>
        +calculateFine(loanId: Long): double
    }

    class BookServiceImpl {
        -bookRepository: BookRepository
        +BookServiceImpl(bookRepository: BookRepository)
        +registerBook(book: Book): Book
        +updateBook(book: Book): Book
        +findBookById(id: Long): Book
        +findBookByIsbn(isbn: String): Book
        +listAllBooks(): List<Book>
        +findBooksByTitle(title: String): List<Book>
        +deleteBook(id: Long): void
        -validateBook(book: Book): void
    }

    class MemberServiceImpl {
        -memberRepository: MemberRepository
        +MemberServiceImpl(memberRepository: MemberRepository)
        +registerMember(member: Member): Member
        +updateMember(member: Member): Member
        +findMemberById(id: Long): Member
        +findMemberByNumber(memberNumber: String): Member
        +listAllMembers(): List<Member>
        +listActiveMembers(): List<Member>
        +activateMember(id: Long): void
        +deactivateMember(id: Long): void
        +deleteMember(id: Long): void
        -validateMember(member: Member): void
    }

    class LoanServiceImpl {
        -loanRepository: LoanRepository
        -bookRepository: BookRepository
        -memberRepository: MemberRepository
        +LoanServiceImpl(loanRepository, bookRepository, memberRepository)
        +createLoan(bookId: Long, memberId: Long, loanDays: int): Loan
        +returnBook(loanId: Long): Loan
        +findLoanById(id: Long): Loan
        +listAllLoans(): List<Loan>
        +listActiveLoansByMember(memberId: Long): List<Loan>
        +listOverdueLoans(): List<Loan>
        +calculateFine(loanId: Long): double
    }
}

' Repository Layer
package "Repository" {
    interface BookRepository {
        +save(book: Book): Book
        +update(book: Book): Book
        +findById(id: Long): Optional<Book>
        +findByIsbn(isbn: String): Optional<Book>
        +findByTitle(title: String): List<Book>
        +findAll(): List<Book>
        +delete(id: Long): void
    }

    interface MemberRepository {
        +save(member: Member): Member
        +update(member: Member): Member
        +findById(id: Long): Optional<Member>
        +findByMemberNumber(memberNumber: String): Optional<Member>
        +findByEmail(email: String): Optional<Member>
        +findAll(): List<Member>
        +findActive(): List<Member>
        +delete(id: Long): void
    }

    interface LoanRepository {
        +save(loan: Loan): Loan
        +update(loan: Loan): Loan
        +findById(id: Long): Optional<Loan>
        +findAll(): List<Loan>
        +findActiveByMemberId(memberId: Long): List<Loan>
        +findActiveByBookId(bookId: Long): List<Loan>
        +findOverdue(): List<Loan>
    }

    class BookRepositoryJDBC {
        -connectionDB: ConnectionDB
        +BookRepositoryJDBC()
        +save(book: Book): Book
        +update(book: Book): Book
        +findById(id: Long): Optional<Book>
        +findByIsbn(isbn: String): Optional<Book>
        +findByTitle(title: String): List<Book>
        +findAll(): List<Book>
        +delete(id: Long): void
        -mapResultSetToBook(rs: ResultSet): Book
    }

    class MemberRepositoryJDBC {
        -connectionDB: ConnectionDB
        +MemberRepositoryJDBC()
        +save(member: Member): Member
        +update(member: Member): Member
        +findById(id: Long): Optional<Member>
        +findByMemberNumber(memberNumber: String): Optional<Member>
        +findByEmail(email: String): Optional<Member>
        +findAll(): List<Member>
        +findActive(): List<Member>
        +delete(id: Long): void
        -mapResultSetToMember(rs: ResultSet): Member
    }

    class LoanRepositoryJDBC {
        -connectionDB: ConnectionDB
        +LoanRepositoryJDBC()
        +save(loan: Loan): Loan
        +update(loan: Loan): Loan
        +findById(id: Long): Optional<Loan>
        +findAll(): List<Loan>
        +findActiveByMemberId(memberId: Long): List<Loan>
        +findActiveByBookId(bookId: Long): List<Loan>
        +findOverdue(): List<Loan>
        -mapResultSetToLoan(rs: ResultSet): Loan
        -mapResultSetToLoanWithDetails(rs: ResultSet): Loan
    }
}

' UI Layer
package "UI" {
    class MainApp {
        +start(primaryStage: Stage): void
        +main(args: String[]): void
        -createMainMenu(primaryStage: Stage): Scene
        -initializeServices(): void
    }

    class BookView {
        -bookService: BookService
        -stage: Stage
        -parentStage: Stage
        -bookTable: TableView<Book>
        -bookList: ObservableList<Book>
        +BookView(bookService: BookService)
        +show(parentStage: Stage): void
        -createUI(): void
        -loadBooks(): void
        -addBook(): void
        -updateBook(): void
        -deleteBook(): void
        -searchBooks(): void
        -showError(title: String, message: String): void
        -showInfo(title: String, message: String): void
    }

    class MemberView {
        -memberService: MemberService
        -stage: Stage
        -parentStage: Stage
        -memberTable: TableView<Member>
        -memberList: ObservableList<Member>
        +MemberView(memberService: MemberService)
        +show(parentStage: Stage): void
        -createUI(): void
        -loadMembers(): void
        -addMember(): void
        -updateMember(): void
        -activateMember(): void
        -deactivateMember(): void
        -showError(title: String, message: String): void
        -showInfo(title: String, message: String): void
    }

    class LoanView {
        -loanService: LoanService
        -bookService: BookService
        -memberService: MemberService
        -stage: Stage
        -parentStage: Stage
        -loanTable: TableView<Loan>
        -loanList: ObservableList<Loan>
        +LoanView(loanService, bookService, memberService)
        +show(parentStage: Stage): void
        -createUI(): void
        -loadLoans(): void
        -createLoan(): void
        -returnBook(): void
        -calculateFine(): void
        -exportOverdueLoans(): void
        -showError(title: String, message: String): void
        -showInfo(title: String, message: String): void
    }
}

' Exception Classes
package "Exceptions" {
    abstract class LibroNovaException {
        +LibroNovaException()
        +LibroNovaException(message: String)
        +LibroNovaException(message: String, cause: Throwable)
    }

    class DatabaseException {
        +DatabaseException(message: String)
        +DatabaseException(message: String, cause: Throwable)
    }

    class ValidationException {
        +ValidationException(message: String)
        +ValidationException(errors: List<String>)
    }

    class EntityNotFoundException {
        -entityType: String
        -identifier: Object
        +EntityNotFoundException(entityType: String, identifier: Object)
        +getEntityType(): String
        +getIdentifier(): Object
    }

    class DuplicateISBNException {
        -isbn: String
        +DuplicateISBNException(isbn: String)
        +getIsbn(): String
    }

    class InactiveMemberException {
        -memberNumber: String
        +InactiveMemberException(memberNumber: String)
        +getMemberNumber(): String
    }

    class InsufficientStockException {
        -isbn: String
        -availableStock: int
        +InsufficientStockException(isbn: String, availableStock: int)
        +getIsbn(): String
        +getAvailableStock(): int
    }

    class InvalidMemberNumberException {
        -memberNumber: String
        +InvalidMemberNumberException(memberNumber: String)
        +getMemberNumber(): String
    }
}

' Infrastructure
package "Infrastructure" {
    class ConnectionDB {
        -instance: ConnectionDB
        -dataSource: HikariDataSource
        +getInstance(): ConnectionDB
        +getConnection(): Connection
        -loadProperties(): Properties
    }

    class CSVExporter {
        +exportOverdueLoans(loans: List<Loan>, filename: String): String
        +exportBooks(books: List<Book>, filename: String): String
        +exportMembers(members: List<Member>, filename: String): String
    }
}

' Relationships
BookService <|.. BookServiceImpl
MemberService <|.. MemberServiceImpl
LoanService <|.. LoanServiceImpl

BookRepository <|.. BookRepositoryJDBC
MemberRepository <|.. MemberRepositoryJDBC
LoanRepository <|.. LoanRepositoryJDBC

BookServiceImpl --> BookRepository
MemberServiceImpl --> MemberRepository
LoanServiceImpl --> LoanRepository
LoanServiceImpl --> BookRepository
LoanServiceImpl --> MemberRepository

BookView --> BookService
MemberView --> MemberService
LoanView --> LoanService
LoanView --> BookService
LoanView --> MemberService

MainApp --> BookView
MainApp --> MemberView
MainApp --> LoanView

Loan --> Book
Loan --> Member
Member --> MemberStatus
Member --> UserRole
Loan --> LoanStatus

LibroNovaException <|-- DatabaseException
LibroNovaException <|-- ValidationException
LibroNovaException <|-- EntityNotFoundException
LibroNovaException <|-- DuplicateISBNException
LibroNovaException <|-- InactiveMemberException
LibroNovaException <|-- InsufficientStockException
LibroNovaException <|-- InvalidMemberNumberException

BookRepositoryJDBC --> ConnectionDB
MemberRepositoryJDBC --> ConnectionDB
LoanRepositoryJDBC --> ConnectionDB

LoanView --> CSVExporter

note right of BookServiceImpl
    Handles book business logic:
    - ISBN validation
    - Stock management
    - Search operations
end note

note right of LoanServiceImpl
    Manages loan operations:
    - Creates loans with validations
    - Processes book returns
    - Calculates fines ($1/day)
    - Stock adjustments
end note

note right of ConnectionDB
    Singleton pattern for
    database connections
    using HikariCP pool
end note

@enduml